/**
 * API v1
 * FormAPI is a service that helps you fill out and sign PDF templates.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.FormAPI) {
      root.FormAPI = {};
    }
    root.FormAPI.Templatesv2TemplateDocumentMetadata = factory(root.FormAPI.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Templatesv2TemplateDocumentMetadata model module.
   * @module model/Templatesv2TemplateDocumentMetadata
   * @version 2.7.0
   */

  /**
   * Constructs a new <code>Templatesv2TemplateDocumentMetadata</code>.
   * @alias module:model/Templatesv2TemplateDocumentMetadata
   * @class
   */
  var exports = function() {
    var _this = this;




  };

  /**
   * Constructs a <code>Templatesv2TemplateDocumentMetadata</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Templatesv2TemplateDocumentMetadata} obj Optional instance to populate.
   * @return {module:model/Templatesv2TemplateDocumentMetadata} The populated <code>Templatesv2TemplateDocumentMetadata</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('filename')) {
        obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
      }
      if (data.hasOwnProperty('size')) {
        obj['size'] = ApiClient.convertToType(data['size'], 'Number');
      }
      if (data.hasOwnProperty('mime_type')) {
        obj['mime_type'] = ApiClient.convertToType(data['mime_type'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {String} filename
   */
  exports.prototype['filename'] = undefined;
  /**
   * @member {Number} size
   */
  exports.prototype['size'] = undefined;
  /**
   * @member {module:model/Templatesv2TemplateDocumentMetadata.MimeTypeEnum} mime_type
   */
  exports.prototype['mime_type'] = undefined;


  /**
   * Allowed values for the <code>mime_type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.MimeTypeEnum = {
    /**
     * value: "application/pdf"
     * @const
     */
    "application/pdf": "application/pdf"  };


  return exports;
}));


